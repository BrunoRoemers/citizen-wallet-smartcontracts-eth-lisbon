// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AccfactoryMetaData contains all meta data concerning the Accfactory contract.
var AccfactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561000f575f80fd5b5060405161254538038061254583398101604081905261002e91610084565b8060405161003b90610077565b6001600160a01b039091168152602001604051809103905ff080158015610064573d5f803e3d5ffd5b506001600160a01b0316608052506100b1565b611c148061093183390190565b5f60208284031215610094575f80fd5b81516001600160a01b03811681146100aa575f80fd5b9392505050565b60805161085c6100d55f395f818160480152818160d20152610197015261085c5ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806311464fbe146100435780635fbfb9cf146100805780638cb84e1814610093575b5f80fd5b61006a7f000000000000000000000000000000000000000000000000000000000000000081565b604051610077919061027d565b60405180910390f35b61006a61008e366004610291565b6100a6565b61006a6100a1366004610291565b61016a565b5f806100b2848461016a565b90506001600160a01b0381163b80156100cd57509050610164565b835f1b7f000000000000000000000000000000000000000000000000000000000000000086604051602401610102919061027d565b60408051601f198184030181529181526020820180516001600160e01b031663189acdbd60e31b1790525161013690610270565b6101419291906102e8565b8190604051809103905ff590508015801561015e573d5f803e3d5ffd5b50925050505b92915050565b5f610239825f1b6040518060200161018190610270565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000866040516024016101c7919061027d565b60408051601f19818403018152918152602080830180516001600160e01b031663189acdbd60e31b1790529051610200939291016102e8565b60408051601f198184030181529082905261021e9291602001610329565b60405160208183030381529060405280519060200120610240565b9392505050565b5f6102398383305f604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6104cf8061035883390190565b6001600160a01b0391909116815260200190565b5f80604083850312156102a2575f80fd5b82356001600160a01b03811681146102b8575f80fd5b946020939093013593505050565b5f5b838110156102e05781810151838201526020016102c8565b50505f910152565b60018060a01b0383168152604060208201525f82518060408401526103148160608501602087016102c6565b601f01601f1916919091016060019392505050565b5f835161033a8184602088016102c6565b83519083019061034e8183602088016102c6565b0194935050505056fe60806040526040516104cf3803806104cf833981016040819052610022916102dd565b61002d82825f610034565b50506103f2565b61003d8361005f565b5f825111806100495750805b1561005a57610058838361009e565b505b505050565b610068816100ca565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60606100c383836040518060600160405280602781526020016104a86027913961017b565b9392505050565b6100d3816101f0565b61013a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80856001600160a01b03168560405161019791906103a5565b5f60405180830381855af49150503d805f81146101cf576040519150601f19603f3d011682016040523d82523d5f602084013e6101d4565b606091505b5090925090506101e6868383876101ff565b9695505050505050565b6001600160a01b03163b151590565b6060831561026b5782515f0361026457610218856101f0565b6102645760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610131565b5081610275565b610275838361027d565b949350505050565b81511561028d5781518083602001fd5b8060405162461bcd60e51b815260040161013191906103c0565b634e487b7160e01b5f52604160045260245ffd5b5f5b838110156102d55781810151838201526020016102bd565b50505f910152565b5f80604083850312156102ee575f80fd5b82516001600160a01b0381168114610304575f80fd5b60208401519092506001600160401b0380821115610320575f80fd5b818501915085601f830112610333575f80fd5b815181811115610345576103456102a7565b604051601f8201601f19908116603f0116810190838211818310171561036d5761036d6102a7565b81604052828152886020848701011115610385575f80fd5b6103968360208301602088016102bb565b80955050505050509250929050565b5f82516103b68184602087016102bb565b9190910192915050565b602081525f82518060208401526103de8160408501602087016102bb565b601f01601f19169190910160400192915050565b60aa806103fe5f395ff3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6057565b565b5f60527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e8080156070573d5ff35b3d5ffdfea264697066735822122039e3c5cb4d1f495fb43f24c03a885c0909c29cdfdd2305c06f0fbfe5a0053a4f64736f6c63430008140033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220af9d182c1f3e33891acc33b005d2acc518eb5f1261e1e3fb88021a2b2f4bdb2664736f6c6343000814003360c06040523060805234801562000014575f80fd5b5060405162001c1438038062001c14833981016040819052620000379162000114565b6001600160a01b03811660a0526200004e62000055565b5062000143565b5f54610100900460ff1615620000c15760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff908116101562000112575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b5f6020828403121562000125575f80fd5b81516001600160a01b03811681146200013c575f80fd5b9392505050565b60805160a051611a8c620001885f395f81816107b20152610e8601525f8181610499015281816104d9015281816106550152818161069501526107100152611a8c5ff3fe6080604052600436106100da575f3560e01c806223de29146100e557806301ffc9a71461010b578063150b7a021461013f57806318dfb3c7146101835780633659cfe6146101a25780633a871cdd146101c15780634a58db19146101ee5780634d44560d146101f65780634f1ef2861461021557806352d1902d146102285780638da5cb5b1461023c578063b0d691fe1461026d578063b61d27f614610281578063bc197c81146102a0578063c399ec88146102ce578063c4d66de8146102e2578063d087d28814610301578063f23a6e6114610315575f80fd5b366100e157005b5f80fd5b3480156100f0575f80fd5b506101096100ff3660046113b8565b5050505050505050565b005b348015610116575f80fd5b5061012a610125366004611461565b610341565b60405190151581526020015b60405180910390f35b34801561014a575f80fd5b5061016a610159366004611488565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610136565b34801561018e575f80fd5b5061010961019d366004611535565b610392565b3480156101ad575f80fd5b506101096101bc36600461159b565b61048f565b3480156101cc575f80fd5b506101e06101db3660046115b6565b610556565b604051908152602001610136565b61010961057b565b348015610201575f80fd5b50610109610210366004611604565b6105d8565b610109610223366004611642565b61064b565b348015610233575f80fd5b506101e0610704565b348015610247575f80fd5b505f54610260906201000090046001600160a01b031681565b60405161013691906116ff565b348015610278575f80fd5b506102606107b0565b34801561028c575f80fd5b5061010961029b366004611713565b6107d4565b3480156102ab575f80fd5b5061016a6102ba36600461175e565b63bc197c8160e01b98975050505050505050565b3480156102d9575f80fd5b506101e0610822565b3480156102ed575f80fd5b506101096102fc36600461159b565b61089a565b34801561030c575f80fd5b506101e06109ad565b348015610320575f80fd5b5061016a61032f3660046117f3565b63f23a6e6160e01b9695505050505050565b5f6001600160e01b03198216630a85bd0160e11b148061037157506001600160e01b03198216630271189760e51b145b8061038c57506001600160e01b031982166301ffc9a760e01b145b92915050565b61039a6109ea565b8281146103e45760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064015b60405180910390fd5b5f5b838110156104885761047685858381811061040357610403611869565b9050602002016020810190610418919061159b565b5f85858581811061042b5761042b611869565b905060200281019061043d919061187d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a6e92505050565b80610480816118bf565b9150506103e6565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104d75760405162461bcd60e51b81526004016103db906118e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610509610ada565b6001600160a01b03161461052f5760405162461bcd60e51b81526004016103db9061191c565b61053881610af5565b604080515f8082526020820190925261055391839190610afd565b50565b5f61055f610c6c565b6105698484610cd3565b905061057482610da6565b9392505050565b6105836107b0565b6001600160a01b031663b760faf934306040518363ffffffff1660e01b81526004016105af91906116ff565b5f604051808303818588803b1580156105c6575f80fd5b505af1158015610488573d5f803e3d5ffd5b6105e0610def565b6105e86107b0565b60405163040b850f60e31b81526001600160a01b03848116600483015260248201849052919091169063205c2878906044015f604051808303815f87803b158015610631575f80fd5b505af1158015610643573d5f803e3d5ffd5b505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106935760405162461bcd60e51b81526004016103db906118e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106c5610ada565b6001600160a01b0316146106eb5760405162461bcd60e51b81526004016103db9061191c565b6106f482610af5565b61070082826001610afd565b5050565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461079e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016103db565b505f80516020611a1083398151915290565b7f000000000000000000000000000000000000000000000000000000000000000090565b6107dc6109ea565b61081c848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610a6e92505050565b50505050565b5f61082b6107b0565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161085691906116ff565b602060405180830381865afa158015610871573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108959190611955565b905090565b5f54610100900460ff16158080156108b857505f54600160ff909116105b806108d857506108c730610e45565b1580156108d857505f5460ff166001145b61093b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b5f805460ff19166001179055801561095c575f805461ff0019166101001790555b61096582610e54565b8015610700575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b5f6109b66107b0565b604051631aab3f0d60e11b81523060048201525f60248201526001600160a01b0391909116906335567e1a90604401610856565b6109f26107b0565b6001600160a01b0316336001600160a01b03161480610a2057505f546201000090046001600160a01b031633145b610a6c5760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e7460448201526064016103db565b565b5f80846001600160a01b03168484604051610a89919061198e565b5f6040518083038185875af1925050503d805f8114610ac3576040519150601f19603f3d011682016040523d82523d5f602084013e610ac8565b606091505b50915091508161048857805160208201fd5b5f80516020611a10833981519152546001600160a01b031690565b610553610def565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b3557610b3083610ecf565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b8f575060408051601f3d908101601f19168201909252610b8c91810190611955565b60015b610bf25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016103db565b5f80516020611a108339815191528114610c605760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016103db565b50610b30838383610f68565b610c746107b0565b6001600160a01b0316336001600160a01b031614610a6c5760405162461bcd60e51b815260206004820152601c60248201527b1858d8dbdd5b9d0e881b9bdd08199c9bdb48115b9d1c9e541bda5b9d60221b60448201526064016103db565b5f80610d2a836040517b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b9050610d79610d3d61014086018661187d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508593925050610f8c9050565b5f546201000090046001600160a01b03908116911614610d9d57600191505061038c565b505f9392505050565b8015610553576040515f9033905f1990849084818181858888f193505050503d805f8114610488576040519150601f19603f3d011682016040523d82523d5f602084013e610488565b5f546201000090046001600160a01b0316331480610e0c57503330145b610a6c5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b60448201526064016103db565b6001600160a01b03163b151590565b5f805462010000600160b01b031916620100006001600160a01b038481168202929092178084556040519190048216927f0000000000000000000000000000000000000000000000000000000000000000909216917f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de91a350565b610ed881610e45565b610f3a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016103db565b5f80516020611a1083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610f7183610fae565b5f82511180610f7d5750805b15610b305761081c8383610fed565b5f805f610f998585611012565b91509150610fa681611054565b509392505050565b610fb781610ecf565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60606105748383604051806060016040528060278152602001611a3060279139611198565b5f808251604103611046576020830151604084015160608501515f1a61103a8782858561120c565b9450945050505061104d565b505f905060025b9250929050565b5f816004811115611067576110676119a9565b0361106f5750565b6001816004811115611083576110836119a9565b036110cb5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016103db565b60028160048111156110df576110df6119a9565b0361112c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103db565b6003816004811115611140576111406119a9565b036105535760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103db565b60605f80856001600160a01b0316856040516111b4919061198e565b5f60405180830381855af49150503d805f81146111ec576040519150601f19603f3d011682016040523d82523d5f602084013e6111f1565b606091505b5091509150611202868383876112bf565b9695505050505050565b5f806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561123757505f905060036112b6565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611288573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381166112b0575f600192509250506112b6565b91505f90505b94509492505050565b6060831561132b5782515f03611324576112d885610e45565b6113245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103db565b5081611335565b611335838361133d565b949350505050565b81511561134d5781518083602001fd5b8060405162461bcd60e51b81526004016103db91906119bd565b6001600160a01b0381168114610553575f80fd5b5f8083601f84011261138b575f80fd5b5081356001600160401b038111156113a1575f80fd5b60208301915083602082850101111561104d575f80fd5b5f805f805f805f8060c0898b0312156113cf575f80fd5b88356113da81611367565b975060208901356113ea81611367565b965060408901356113fa81611367565b95506060890135945060808901356001600160401b038082111561141c575f80fd5b6114288c838d0161137b565b909650945060a08b0135915080821115611440575f80fd5b5061144d8b828c0161137b565b999c989b5096995094979396929594505050565b5f60208284031215611471575f80fd5b81356001600160e01b031981168114610574575f80fd5b5f805f805f6080868803121561149c575f80fd5b85356114a781611367565b945060208601356114b781611367565b93506040860135925060608601356001600160401b038111156114d8575f80fd5b6114e48882890161137b565b969995985093965092949392505050565b5f8083601f840112611505575f80fd5b5081356001600160401b0381111561151b575f80fd5b6020830191508360208260051b850101111561104d575f80fd5b5f805f8060408587031215611548575f80fd5b84356001600160401b038082111561155e575f80fd5b61156a888389016114f5565b90965094506020870135915080821115611582575f80fd5b5061158f878288016114f5565b95989497509550505050565b5f602082840312156115ab575f80fd5b813561057481611367565b5f805f606084860312156115c8575f80fd5b83356001600160401b038111156115dd575f80fd5b840161016081870312156115ef575f80fd5b95602085013595506040909401359392505050565b5f8060408385031215611615575f80fd5b823561162081611367565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215611653575f80fd5b823561165e81611367565b915060208301356001600160401b0380821115611679575f80fd5b818501915085601f83011261168c575f80fd5b81358181111561169e5761169e61162e565b604051601f8201601f19908116603f011681019083821181831017156116c6576116c661162e565b816040528281528860208487010111156116de575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b6001600160a01b0391909116815260200190565b5f805f8060608587031215611726575f80fd5b843561173181611367565b93506020850135925060408501356001600160401b03811115611752575f80fd5b61158f8782880161137b565b5f805f805f805f8060a0898b031215611775575f80fd5b883561178081611367565b9750602089013561179081611367565b965060408901356001600160401b03808211156117ab575f80fd5b6117b78c838d016114f5565b909850965060608b01359150808211156117cf575f80fd5b6117db8c838d016114f5565b909650945060808b0135915080821115611440575f80fd5b5f805f805f8060a08789031215611808575f80fd5b863561181381611367565b9550602087013561182381611367565b9450604087013593506060870135925060808701356001600160401b0381111561184b575f80fd5b61185789828a0161137b565b979a9699509497509295939492505050565b634e487b7160e01b5f52603260045260245ffd5b5f808335601e19843603018112611892575f80fd5b8301803591506001600160401b038211156118ab575f80fd5b60200191503681900382131561104d575f80fd5b5f600182016118dc57634e487b7160e01b5f52601160045260245ffd5b5060010190565b6020808252602c908201525f805160206119f083398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201525f805160206119f083398151915260408201526b6163746976652070726f787960a01b606082015260800190565b5f60208284031215611965575f80fd5b5051919050565b5f5b8381101561198657818101518382015260200161196e565b50505f910152565b5f825161199f81846020870161196c565b9190910192915050565b634e487b7160e01b5f52602160045260245ffd5b602081525f82518060208401526119db81604085016020870161196c565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a8ded394dbedf5935c2611e976d31d34269cbbf8ca70346e5ab3ca013089955f64736f6c63430008140033",
}

// AccfactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccfactoryMetaData.ABI instead.
var AccfactoryABI = AccfactoryMetaData.ABI

// AccfactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccfactoryMetaData.Bin instead.
var AccfactoryBin = AccfactoryMetaData.Bin

// DeployAccfactory deploys a new Ethereum contract, binding an instance of Accfactory to it.
func DeployAccfactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *Accfactory, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccfactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// Accfactory is an auto generated Go binding around an Ethereum contract.
type Accfactory struct {
	AccfactoryCaller     // Read-only binding to the contract
	AccfactoryTransactor // Write-only binding to the contract
	AccfactoryFilterer   // Log filterer for contract events
}

// AccfactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccfactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccfactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccfactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccfactorySession struct {
	Contract     *Accfactory       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccfactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccfactoryCallerSession struct {
	Contract *AccfactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccfactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccfactoryTransactorSession struct {
	Contract     *AccfactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccfactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccfactoryRaw struct {
	Contract *Accfactory // Generic contract binding to access the raw methods on
}

// AccfactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccfactoryCallerRaw struct {
	Contract *AccfactoryCaller // Generic read-only contract binding to access the raw methods on
}

// AccfactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccfactoryTransactorRaw struct {
	Contract *AccfactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccfactory creates a new instance of Accfactory, bound to a specific deployed contract.
func NewAccfactory(address common.Address, backend bind.ContractBackend) (*Accfactory, error) {
	contract, err := bindAccfactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// NewAccfactoryCaller creates a new read-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryCaller(address common.Address, caller bind.ContractCaller) (*AccfactoryCaller, error) {
	contract, err := bindAccfactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryCaller{contract: contract}, nil
}

// NewAccfactoryTransactor creates a new write-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccfactoryTransactor, error) {
	contract, err := bindAccfactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryTransactor{contract: contract}, nil
}

// NewAccfactoryFilterer creates a new log filterer instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccfactoryFilterer, error) {
	contract, err := bindAccfactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccfactoryFilterer{contract: contract}, nil
}

// bindAccfactory binds a generic wrapper to an already deployed contract.
func bindAccfactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.AccfactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactorySession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}
