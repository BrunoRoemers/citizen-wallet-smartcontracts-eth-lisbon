// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AccfactoryMetaData contains all meta data concerning the Accfactory contract.
var AccfactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561001057600080fd5b506040516131d53803806131d583398101604081905261002f91610088565b8060405161003c9061007b565b6001600160a01b039091168152602001604051809103906000f080158015610068573d6000803e3d6000fd5b506001600160a01b0316608052506100b8565b61287d8061095883390190565b60006020828403121561009a57600080fd5b81516001600160a01b03811681146100b157600080fd5b9392505050565b6080516108796100df60003960008181604b0152818160ed01526101ba01526108796000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806311464fbe146100465780635fbfb9cf146100895780638cb84e181461009c575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61006d610097366004610295565b6100af565b61006d6100aa366004610295565b61017b565b6000806100bc848461017b565b90506001600160a01b0381163b80156100d757509050610175565b6040516001600160a01b038616602482015284907f00000000000000000000000000000000000000000000000000000000000000009060440160408051601f198184030181529181526020820180516001600160e01b031663189acdbd60e31b1790525161014490610288565b61014f9291906102f1565b8190604051809103906000f590508015801561016f573d6000803e3d6000fd5b50925050505b92915050565b600061024f8260001b6040518060200161019490610288565b601f1982820381018352601f9091011660408190526001600160a01b03871660248201527f00000000000000000000000000000000000000000000000000000000000000009060440160408051601f19818403018152918152602080830180516001600160e01b031663189acdbd60e31b1790529051610216939291016102f1565b60408051601f19818403018152908290526102349291602001610333565b60405160208183030381529060405280519060200120610256565b9392505050565b600061024f8383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6104e18061036383390190565b600080604083850312156102a857600080fd5b82356001600160a01b03811681146102bf57600080fd5b946020939093013593505050565b60005b838110156102e85781810151838201526020016102d0565b50506000910152565b60018060a01b0383168152604060208201526000825180604084015261031e8160608501602087016102cd565b601f01601f1916919091016060019392505050565b600083516103458184602088016102cd565b8351908301906103598183602088016102cd565b0194935050505056fe60806040526040516104e13803806104e1833981016040819052610022916102de565b61002e82826000610035565b50506103fb565b61003e83610061565b60008251118061004b5750805b1561005c5761005a83836100a1565b505b505050565b61006a816100cd565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100c683836040518060600160405280602781526020016104ba60279139610180565b9392505050565b6001600160a01b0381163b61013f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b03168560405161019d91906103ac565b600060405180830381855af49150503d80600081146101d8576040519150601f19603f3d011682016040523d82523d6000602084013e6101dd565b606091505b5090925090506101ef868383876101f9565b9695505050505050565b60608315610268578251600003610261576001600160a01b0385163b6102615760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610136565b5081610272565b610272838361027a565b949350505050565b81511561028a5781518083602001fd5b8060405162461bcd60e51b815260040161013691906103c8565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102d55781810151838201526020016102bd565b50506000910152565b600080604083850312156102f157600080fd5b82516001600160a01b038116811461030857600080fd5b60208401519092506001600160401b038082111561032557600080fd5b818501915085601f83011261033957600080fd5b81518181111561034b5761034b6102a4565b604051601f8201601f19908116603f01168101908382118183101715610373576103736102a4565b8160405282815288602084870101111561038c57600080fd5b61039d8360208301602088016102ba565b80955050505050509250929050565b600082516103be8184602087016102ba565b9190910192915050565b60208152600082518060208401526103e78160408501602087016102ba565b601f01601f19169190910160400192915050565b60b1806104096000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6058565b565b600060537f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156076573d6000f35b3d6000fdfea264697066735822122004eafc12009ddd1bac09a0fbcdbbc0e38fdd09caf7f585983e4d324fd8f99a7364736f6c63430008140033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122038e65ce38bd90719c6329afde9220a1af995f35651dfaba38b58172f2a53912264736f6c6343000814003360c0604052306080523480156200001557600080fd5b506040516200287d3803806200287d833981016040819052620000389162000117565b6001600160a01b03811660a0526200004f62000056565b5062000149565b600154610100900460ff1615620000c35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff9081161462000115576001805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012a57600080fd5b81516001600160a01b03811681146200014257600080fd5b9392505050565b60805160a0516126c1620001bc6000396000818161043801528181610974015281816109fc01528181610c8a01528181610e3601528181611339015281816114b8015261174b01526000818161069f015281816106e801528181610a8501528181610ac50152610b5801526126c16000f3fe6080604052600436106101845760003560e01c80634f1ef286116100d1578063bc197c811161008a578063d087d28811610064578063d087d288146104e0578063e0a66578146104f5578063f23a6e6114610515578063f2fde38b1461054257600080fd5b8063bc197c811461047c578063c399ec88146104ab578063c4d66de8146104c057600080fd5b80634f1ef286146103ba57806352d1902d146103cd578063715018a6146103e25780638da5cb5b146103f7578063b0d691fe14610429578063b61d27f61461045c57600080fd5b8063353772141161013e5780633a871cdd116101185780633a871cdd1461035257806347e1da2a146103725780634a58db19146103925780634d44560d1461039a57600080fd5b806335377214146102b457806335567e1a146102d45780633659cfe61461033257600080fd5b806223de291461019057806301ffc9a7146101b75780630bd28e3b146101ec578063150b7a021461020c5780631626ba7e146102515780631b2e01b81461027157600080fd5b3661018b57005b600080fd5b34801561019c57600080fd5b506101b56101ab366004611e0a565b5050505050505050565b005b3480156101c357600080fd5b506101d76101d2366004611eba565b610562565b60405190151581526020015b60405180910390f35b3480156101f857600080fd5b506101b5610207366004611f00565b6105b4565b34801561021857600080fd5b50610238610227366004611f1b565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101e3565b34801561025d57600080fd5b5061023861026c366004611f8d565b6105e9565b34801561027d57600080fd5b506102a661028c366004611fd8565b600060208181529281526040808220909352908152205481565b6040519081526020016101e3565b3480156102c057600080fd5b506101b56102cf366004612051565b61067c565b3480156102e057600080fd5b506102a66102ef366004611fd8565b6001600160a01b0382166000908152602081815260408083206001600160c01b038516845290915290819020549082901b67ffffffffffffffff19161792915050565b34801561033e57600080fd5b506101b561034d366004612092565b610695565b34801561035e57600080fd5b506102a661036d3660046120af565b61077d565b34801561037e57600080fd5b506101b561038d366004612102565b61079c565b6101b5610972565b3480156103a657600080fd5b506101b56103b536600461219b565b6109f2565b6101b56103c83660046121dd565b610a7b565b3480156103d957600080fd5b506102a6610b4b565b3480156103ee57600080fd5b506101b5610bfe565b34801561040357600080fd5b506034546001600160a01b03165b6040516001600160a01b0390911681526020016101e3565b34801561043557600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610411565b34801561046857600080fd5b506101b56104773660046122a0565b610c12565b34801561048857600080fd5b506102386104973660046122fb565b63bc197c8160e01b98975050505050505050565b3480156104b757600080fd5b506102a6610c6a565b3480156104cc57600080fd5b506101b56104db366004612092565b610cfb565b3480156104ec57600080fd5b506102a6610e0f565b34801561050157600080fd5b506101b5610510366004612092565b610e65565b34801561052157600080fd5b50610238610530366004612398565b63f23a6e6160e01b9695505050505050565b34801561054e57600080fd5b506101b561055d366004612092565b610e8f565b60006001600160e01b03198216630a85bd0160e11b148061059357506001600160e01b03198216630271189760e51b145b806105ae57506001600160e01b031982166301ffc9a760e01b145b92915050565b336000908152602081815260408083206001600160c01b038516845290915281208054916105e183612417565b919050555050565b60008061062c8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f0592505050565b90506106406034546001600160a01b031690565b6001600160a01b0316816001600160a01b0316036106685750630b135d3f60e11b9050610675565b506001600160e01b031990505b9392505050565b610684611161565b61069060cb8383611d3c565b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106e65760405162461bcd60e51b81526004016106dd90612430565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661072f600080516020612625833981519152546001600160a01b031690565b6001600160a01b0316146107555760405162461bcd60e51b81526004016106dd9061247c565b61075e816111bb565b6040805160008082526020820190925261077a918391906111c3565b50565b600061078761132e565b61079184846113a6565b905061067582611460565b6107a46114ad565b84811480156107ba57508215806107ba57508281145b6107fc5760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064016106dd565b60008390036108e15760005b858110156108db5761083f878783818110610825576108256124c8565b905060200201602081019061083a9190612092565b611566565b6108c9878783818110610854576108546124c8565b90506020020160208101906108699190612092565b600085858581811061087d5761087d6124c8565b905060200281019061088f91906124de565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061162b92505050565b806108d381612417565b915050610808565b5061096a565b60005b8581101561096857610901878783818110610825576108256124c8565b610956878783818110610916576109166124c8565b905060200201602081019061092b9190612092565b86868481811061093d5761093d6124c8565b9050602002013585858581811061087d5761087d6124c8565b8061096081612417565b9150506108e4565b505b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000060405163b760faf960e01b81523060048201526001600160a01b03919091169063b760faf99034906024016000604051808303818588803b1580156109d757600080fd5b505af11580156109eb573d6000803e3d6000fd5b5050505050565b6109fa611161565b7f000000000000000000000000000000000000000000000000000000000000000060405163040b850f60e31b81526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b158015610a6757600080fd5b505af115801561096a573d6000803e3d6000fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ac35760405162461bcd60e51b81526004016106dd90612430565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b0c600080516020612625833981519152546001600160a01b031690565b6001600160a01b031614610b325760405162461bcd60e51b81526004016106dd9061247c565b610b3b826111bb565b610b47828260016111c3565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610beb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106dd565b5060008051602061262583398151915290565b610c06611161565b610c10600061169b565b565b610c1a6114ad565b610c2384611566565b610c64848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061162b92505050565b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf69190612524565b905090565b600154610100900460ff1615808015610d1857506001805460ff16105b80610d315750303b158015610d3157506001805460ff16145b610d945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106dd565b6001805460ff1916811790558015610db6576001805461ff0019166101001790555b610dbe6116ed565b610dc78261171c565b8015610b47576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b604051631aab3f0d60e11b8152306004820152600060248201819052906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610cb5565b610e6d611161565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b610e97611161565b6001600160a01b038116610efc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106dd565b61077a8161169b565b60008151604114610f6c5760405162461bcd60e51b815260206004820152603a602482015260008051602061266c83398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e67746800000000000060648201526084016106dd565b600082604081518110610f8157610f816124c8565b016020015160f81c90506000610f978482611795565b90506000610fa6856020611795565b90506fa2a8918ca85bafe22016d0b997e4df60600160ff1b038111156110225760405162461bcd60e51b815260206004820152603d602482015260008051602061266c83398151915260448201527f3a20696e76616c6964207369676e6174757265202773272076616c756500000060648201526084016106dd565b8260ff16601b1415801561103a57508260ff16601c14155b1561109b5760405162461bcd60e51b815260206004820152603d602482015260008051602061266c83398151915260448201527f3a20696e76616c6964207369676e6174757265202776272076616c756500000060648201526084016106dd565b60408051600081526020810180835288905260ff851691810191909152606081018390526080810182905260019060a0016020604051602081039080840390855afa1580156110ee573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b0384166111585760405162461bcd60e51b8152602060048201526030602482015260008051602061266c83398151915260448201526f1d1024a72b20a624a22fa9a4a3a722a960811b60648201526084016106dd565b50505092915050565b6034546001600160a01b03163314610c105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106dd565b61077a611161565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156111f657610690836117fb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611250575060408051601f3d908101601f1916820190925261124d91810190612524565b60015b6112b35760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106dd565b60008051602061262583398151915281146113225760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106dd565b50610690838383611897565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c105760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016106dd565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c829052603c81206114236113e66101408601866124de565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506118bc9050565b6001600160a01b031661143e6034546001600160a01b031690565b6001600160a01b0316146114565760019150506105ae565b5060009392505050565b801561077a57604051600090339060001990849084818181858888f193505050503d80600081146109eb576040519150601f19603f3d011682016040523d82523d6000602084013e6109eb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806114ee57506034546001600160a01b031633145b80611503575060ca546001600160a01b031633145b610c105760405162461bcd60e51b815260206004820152602e60248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e7460448201526d1037b91020baba3437b934bd32b960911b60648201526084016106dd565b60ca546001600160a01b0316331461157b5750565b6115df60cb8054806020026020016040519081016040528092919081815260200182805480156115d457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b6575b5050505050826118e0565b61077a5760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a2061646472657373206e6f742077686974656c697374656460448201526064016106dd565b600080846001600160a01b031684846040516116479190612561565b60006040518083038185875af1925050503d8060008114611684576040519150601f19603f3d011682016040523d82523d6000602084013e611689565b606091505b5091509150816109eb57805160208201fd5b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600154610100900460ff166117145760405162461bcd60e51b81526004016106dd9061257d565b610c1061193b565b61172581610e8f565b60ca80546001600160a01b0319166001600160a01b0383811691821790925560405190917f000000000000000000000000000000000000000000000000000000000000000016907f526ffefac8167421b9048ae3377810715d834479565b0182ea4155f0efa4c38090600090a350565b60006117a28260206125c8565b835110156117f25760405162461bcd60e51b815260206004820181905260248201527f72656164427974657333323a20696e76616c69642064617461206c656e67746860448201526064016106dd565b50016020015190565b6001600160a01b0381163b6118685760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106dd565b60008051602061262583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118a08361196b565b6000825111806118ad5750805b1561069057610c6483836119ab565b60008060006118cb85856119d0565b915091506118d881611a15565b509392505050565b6000805b835181101561145657826001600160a01b0316848281518110611909576119096124c8565b60200260200101516001600160a01b0316036119295760019150506105ae565b8061193381612417565b9150506118e4565b600154610100900460ff166119625760405162461bcd60e51b81526004016106dd9061257d565b610c103361169b565b611974816117fb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610675838360405180606001604052806027815260200161264560279139611b5f565b6000808251604103611a065760208301516040840151606085015160001a6119fa87828585611bd7565b94509450505050611a0e565b506000905060025b9250929050565b6000816004811115611a2957611a296125db565b03611a315750565b6001816004811115611a4557611a456125db565b03611a925760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106dd565b6002816004811115611aa657611aa66125db565b03611af35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106dd565b6003816004811115611b0757611b076125db565b0361077a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106dd565b6060600080856001600160a01b031685604051611b7c9190612561565b600060405180830381855af49150503d8060008114611bb7576040519150601f19603f3d011682016040523d82523d6000602084013e611bbc565b606091505b5091509150611bcd86838387611c91565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115611c045750600090506003611c88565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c58573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c8157600060019250925050611c88565b9150600090505b94509492505050565b60608315611d00578251600003611cf9576001600160a01b0385163b611cf95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106dd565b5081611d0a565b611d0a8383611d12565b949350505050565b815115611d225781518083602001fd5b8060405162461bcd60e51b81526004016106dd91906125f1565b828054828255906000526020600020908101928215611d8f579160200282015b82811115611d8f5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611d5c565b50611d9b929150611d9f565b5090565b5b80821115611d9b5760008155600101611da0565b6001600160a01b038116811461077a57600080fd5b60008083601f840112611ddb57600080fd5b5081356001600160401b03811115611df257600080fd5b602083019150836020828501011115611a0e57600080fd5b60008060008060008060008060c0898b031215611e2657600080fd5b8835611e3181611db4565b97506020890135611e4181611db4565b96506040890135611e5181611db4565b95506060890135945060808901356001600160401b0380821115611e7457600080fd5b611e808c838d01611dc9565b909650945060a08b0135915080821115611e9957600080fd5b50611ea68b828c01611dc9565b999c989b5096995094979396929594505050565b600060208284031215611ecc57600080fd5b81356001600160e01b03198116811461067557600080fd5b80356001600160c01b0381168114611efb57600080fd5b919050565b600060208284031215611f1257600080fd5b61067582611ee4565b600080600080600060808688031215611f3357600080fd5b8535611f3e81611db4565b94506020860135611f4e81611db4565b93506040860135925060608601356001600160401b03811115611f7057600080fd5b611f7c88828901611dc9565b969995985093965092949392505050565b600080600060408486031215611fa257600080fd5b8335925060208401356001600160401b03811115611fbf57600080fd5b611fcb86828701611dc9565b9497909650939450505050565b60008060408385031215611feb57600080fd5b8235611ff681611db4565b915061200460208401611ee4565b90509250929050565b60008083601f84011261201f57600080fd5b5081356001600160401b0381111561203657600080fd5b6020830191508360208260051b8501011115611a0e57600080fd5b6000806020838503121561206457600080fd5b82356001600160401b0381111561207a57600080fd5b6120868582860161200d565b90969095509350505050565b6000602082840312156120a457600080fd5b813561067581611db4565b6000806000606084860312156120c457600080fd5b83356001600160401b038111156120da57600080fd5b840161016081870312156120ed57600080fd5b95602085013595506040909401359392505050565b6000806000806000806060878903121561211b57600080fd5b86356001600160401b038082111561213257600080fd5b61213e8a838b0161200d565b9098509650602089013591508082111561215757600080fd5b6121638a838b0161200d565b9096509450604089013591508082111561217c57600080fd5b5061218989828a0161200d565b979a9699509497509295939492505050565b600080604083850312156121ae57600080fd5b82356121b981611db4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156121f057600080fd5b82356121fb81611db4565b915060208301356001600160401b038082111561221757600080fd5b818501915085601f83011261222b57600080fd5b81358181111561223d5761223d6121c7565b604051601f8201601f19908116603f01168101908382118183101715612265576122656121c7565b8160405282815288602084870101111561227e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080606085870312156122b657600080fd5b84356122c181611db4565b93506020850135925060408501356001600160401b038111156122e357600080fd5b6122ef87828801611dc9565b95989497509550505050565b60008060008060008060008060a0898b03121561231757600080fd5b883561232281611db4565b9750602089013561233281611db4565b965060408901356001600160401b038082111561234e57600080fd5b61235a8c838d0161200d565b909850965060608b013591508082111561237357600080fd5b61237f8c838d0161200d565b909650945060808b0135915080821115611e9957600080fd5b60008060008060008060a087890312156123b157600080fd5b86356123bc81611db4565b955060208701356123cc81611db4565b9450604087013593506060870135925060808701356001600160401b038111156123f557600080fd5b61218989828a01611dc9565b634e487b7160e01b600052601160045260246000fd5b60006001820161242957612429612401565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126124f557600080fd5b8301803591506001600160401b0382111561250f57600080fd5b602001915036819003821315611a0e57600080fd5b60006020828403121561253657600080fd5b5051919050565b60005b83811015612558578181015183820152602001612540565b50506000910152565b6000825161257381846020870161253d565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808201808211156105ae576105ae612401565b634e487b7160e01b600052602160045260246000fd5b602081526000825180602084015261261081604085016020870161253d565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65645369676e617475726556616c696461746f72237265636f7665725369676e6572a26469706673582212209cc90dc2176d721b0c82549af47aa77f316ecd928d45724cff789db4ebc227cf64736f6c63430008140033",
}

// AccfactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccfactoryMetaData.ABI instead.
var AccfactoryABI = AccfactoryMetaData.ABI

// AccfactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccfactoryMetaData.Bin instead.
var AccfactoryBin = AccfactoryMetaData.Bin

// DeployAccfactory deploys a new Ethereum contract, binding an instance of Accfactory to it.
func DeployAccfactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *Accfactory, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccfactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// Accfactory is an auto generated Go binding around an Ethereum contract.
type Accfactory struct {
	AccfactoryCaller     // Read-only binding to the contract
	AccfactoryTransactor // Write-only binding to the contract
	AccfactoryFilterer   // Log filterer for contract events
}

// AccfactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccfactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccfactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccfactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccfactorySession struct {
	Contract     *Accfactory       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccfactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccfactoryCallerSession struct {
	Contract *AccfactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccfactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccfactoryTransactorSession struct {
	Contract     *AccfactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccfactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccfactoryRaw struct {
	Contract *Accfactory // Generic contract binding to access the raw methods on
}

// AccfactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccfactoryCallerRaw struct {
	Contract *AccfactoryCaller // Generic read-only contract binding to access the raw methods on
}

// AccfactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccfactoryTransactorRaw struct {
	Contract *AccfactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccfactory creates a new instance of Accfactory, bound to a specific deployed contract.
func NewAccfactory(address common.Address, backend bind.ContractBackend) (*Accfactory, error) {
	contract, err := bindAccfactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// NewAccfactoryCaller creates a new read-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryCaller(address common.Address, caller bind.ContractCaller) (*AccfactoryCaller, error) {
	contract, err := bindAccfactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryCaller{contract: contract}, nil
}

// NewAccfactoryTransactor creates a new write-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccfactoryTransactor, error) {
	contract, err := bindAccfactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryTransactor{contract: contract}, nil
}

// NewAccfactoryFilterer creates a new log filterer instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccfactoryFilterer, error) {
	contract, err := bindAccfactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccfactoryFilterer{contract: contract}, nil
}

// bindAccfactory binds a generic wrapper to an already deployed contract.
func bindAccfactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.AccfactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactorySession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}
