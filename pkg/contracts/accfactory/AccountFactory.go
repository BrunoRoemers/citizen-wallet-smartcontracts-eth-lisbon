// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AccfactoryMetaData contains all meta data concerning the Accfactory contract.
var AccfactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"nonceSequenceNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405234801561001057600080fd5b506040516133f63803806133f683398101604081905261002f916100ae565b813060405161003d90610089565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610070573d6000803e3d6000fd5b506001600160a01b039081166080521660a052506100e8565b61283380610bc383390190565b6001600160a01b03811681146100ab57600080fd5b50565b600080604083850312156100c157600080fd5b82516100cc81610096565b60208401519092506100dd81610096565b809150509250929050565b60805160a051610aa2610121600039600081816102080152610305015260008181608e01528181610231015261032c0152610aa26000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80630bd28e3b146200006f57806311464fbe14620000885780631b2e01b814620000cd57806335567e1a14620001075780635fbfb9cf146200011e5780638cb84e181462000135575b600080fd5b62000086620000803660046200042b565b6200014c565b005b620000b07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620000f8620000de36600462000461565b600060208181529281526040808220909352908152205481565b604051908152602001620000c4565b620000f86200011836600462000461565b62000183565b620000b06200012f36600462000499565b620001c7565b620000b06200014636600462000499565b620002c2565b336000908152602081815260408083206001600160c01b038516845290915281208054916200017b83620004c6565b919050555050565b6001600160a01b0382166000908152602081815260408083206001600160c01b038516845290915290819020549082901b67ffffffffffffffff1916175b92915050565b600080620001d68484620002c2565b90506001600160a01b0381163b8015620001f357509050620001c1565b6040516001600160a01b0380871660248301527f000000000000000000000000000000000000000000000000000000000000000016604482015284907f00000000000000000000000000000000000000000000000000000000000000009060640160408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b179052516200028a9062000400565b6200029792919062000514565b8190604051809103906000f5905080158015620002b8573d6000803e3d6000fd5b5095945050505050565b6000620003c68260001b60405180602001620002de9062000400565b601f1982820381018352601f9091011660408190526001600160a01b0380881660248301527f00000000000000000000000000000000000000000000000000000000000000001660448201527f00000000000000000000000000000000000000000000000000000000000000009060640160408051601f19818403018152918152602080830180516001600160e01b031663485cc95560e01b17905290516200038a9392910162000514565b60408051601f1981840301815290829052620003aa929160200162000558565b60405160208183030381529060405280519060200120620003cd565b9392505050565b6000620003c68383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6104e1806200058c83390190565b80356001600160c01b03811681146200042657600080fd5b919050565b6000602082840312156200043e57600080fd5b620003c6826200040e565b80356001600160a01b03811681146200042657600080fd5b600080604083850312156200047557600080fd5b620004808362000449565b915062000490602084016200040e565b90509250929050565b60008060408385031215620004ad57600080fd5b620004b88362000449565b946020939093013593505050565b600060018201620004e757634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b838110156200050b578181015183820152602001620004f1565b50506000910152565b60018060a01b0383168152604060208201526000825180604084015262000543816060850160208701620004ee565b601f01601f1916919091016060019392505050565b600083516200056c818460208801620004ee565b83519083019062000582818360208801620004ee565b0194935050505056fe60806040526040516104e13803806104e1833981016040819052610022916102de565b61002e82826000610035565b50506103fb565b61003e83610061565b60008251118061004b5750805b1561005c5761005a83836100a1565b505b505050565b61006a816100cd565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100c683836040518060600160405280602781526020016104ba60279139610180565b9392505050565b6001600160a01b0381163b61013f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080856001600160a01b03168560405161019d91906103ac565b600060405180830381855af49150503d80600081146101d8576040519150601f19603f3d011682016040523d82523d6000602084013e6101dd565b606091505b5090925090506101ef868383876101f9565b9695505050505050565b60608315610268578251600003610261576001600160a01b0385163b6102615760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610136565b5081610272565b610272838361027a565b949350505050565b81511561028a5781518083602001fd5b8060405162461bcd60e51b815260040161013691906103c8565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102d55781810151838201526020016102bd565b50506000910152565b600080604083850312156102f157600080fd5b82516001600160a01b038116811461030857600080fd5b60208401519092506001600160401b038082111561032557600080fd5b818501915085601f83011261033957600080fd5b81518181111561034b5761034b6102a4565b604051601f8201601f19908116603f01168101908382118183101715610373576103736102a4565b8160405282815288602084870101111561038c57600080fd5b61039d8360208301602088016102ba565b80955050505050509250929050565b600082516103be8184602087016102ba565b9190910192915050565b60208152600082518060208401526103e78160408501602087016102ba565b601f01601f19169190910160400192915050565b60b1806104096000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6058565b565b600060537f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156076573d6000f35b3d6000fdfea264697066735822122004eafc12009ddd1bac09a0fbcdbbc0e38fdd09caf7f585983e4d324fd8f99a7364736f6c63430008140033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122071c149af951fc219aa66c46ee3a32f46e4b5a576f6de85098ebf65de953025bc64736f6c6343000814003360e0604052306080523480156200001557600080fd5b506040516200283338038062002833833981016040819052620000389162000137565b6001600160a01b0380831660a052811660c052620000556200005d565b505062000176565b600054610100900460ff1615620000ca5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146200011c576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013457600080fd5b50565b600080604083850312156200014b57600080fd5b825162000158816200011e565b60208401519092506200016b816200011e565b809150509250929050565b60805160a05160c051612640620001f3600039600061048b01526000818161036f015281816109a601528181610a2e01528181610cbc01528181610d540152818161127a015281816113f901526116500152600081816105b5015281816105fe01528181610ab701528181610af70152610b8a01526126406000f3fe60806040526004361061014e5760003560e01c806352d1902d116100b6578063c399ec881161006f578063c399ec88146103e2578063d087d288146103f7578063e0a665781461040c578063f23a6e611461042c578063f2fde38b14610459578063fddc205f1461047957600080fd5b806352d1902d14610304578063715018a6146103195780638da5cb5b1461032e578063b0d691fe14610360578063b61d27f614610393578063bc197c81146103b357600080fd5b80633a871cdd116101085780633a871cdd1461025b57806347e1da2a14610289578063485cc955146102a95780634a58db19146102c95780634d44560d146102d15780634f1ef286146102f157600080fd5b806223de291461015a57806301ffc9a714610181578063150b7a02146101b65780631626ba7e146101fb578063353772141461021b5780633659cfe61461023b57600080fd5b3661015557005b600080fd5b34801561016657600080fd5b5061017f610175366004611dbc565b5050505050505050565b005b34801561018d57600080fd5b506101a161019c366004611e6c565b6104ad565b60405190151581526020015b60405180910390f35b3480156101c257600080fd5b506101e26101d1366004611e96565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101ad565b34801561020757600080fd5b506101e2610216366004611f08565b6104ff565b34801561022757600080fd5b5061017f610236366004611f97565b610592565b34801561024757600080fd5b5061017f610256366004611fd8565b6105ab565b34801561026757600080fd5b5061027b610276366004611ff5565b610693565b6040519081526020016101ad565b34801561029557600080fd5b5061017f6102a4366004612048565b6106b2565b3480156102b557600080fd5b5061017f6102c43660046120e1565b610888565b61017f6109a4565b3480156102dd57600080fd5b5061017f6102ec36600461211a565b610a24565b61017f6102ff36600461215c565b610aad565b34801561031057600080fd5b5061027b610b7d565b34801561032557600080fd5b5061017f610c30565b34801561033a57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101ad565b34801561036c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610348565b34801561039f57600080fd5b5061017f6103ae36600461221f565b610c44565b3480156103bf57600080fd5b506101e26103ce36600461227a565b63bc197c8160e01b98975050505050505050565b3480156103ee57600080fd5b5061027b610c9c565b34801561040357600080fd5b5061027b610d2d565b34801561041857600080fd5b5061017f610427366004611fd8565b610d83565b34801561043857600080fd5b506101e2610447366004612317565b63f23a6e6160e01b9695505050505050565b34801561046557600080fd5b5061017f610474366004611fd8565b610dad565b34801561048557600080fd5b506103487f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216630a85bd0160e11b14806104de57506001600160e01b03198216630271189760e51b145b806104f957506001600160e01b031982166301ffc9a760e01b145b92915050565b6000806105428585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e2392505050565b90506105566033546001600160a01b031690565b6001600160a01b0316816001600160a01b03160361057e5750630b135d3f60e11b905061058b565b506001600160e01b031990505b9392505050565b61059a61107f565b6105a660ca8383611cee565b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105fc5760405162461bcd60e51b81526004016105f390612380565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106456000805160206125a4833981519152546001600160a01b031690565b6001600160a01b03161461066b5760405162461bcd60e51b81526004016105f3906123cc565b610674816110fc565b6040805160008082526020820190925261069091839190611104565b50565b600061069d61126f565b6106a784846112e7565b905061058b826113a1565b6106ba6113ee565b84811480156106d057508215806106d057508281145b6107125760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064016105f3565b60008390036107f75760005b858110156107f15761075587878381811061073b5761073b612418565b90506020020160208101906107509190611fd8565b6114a7565b6107df87878381811061076a5761076a612418565b905060200201602081019061077f9190611fd8565b600085858581811061079357610793612418565b90506020028101906107a5919061242e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157f92505050565b806107e98161248a565b91505061071e565b50610880565b60005b8581101561087e5761081787878381811061073b5761073b612418565b61086c87878381811061082c5761082c612418565b90506020020160208101906108419190611fd8565b86868481811061085357610853612418565b9050602002013585858581811061079357610793612418565b806108768161248a565b9150506107fa565b505b505050505050565b600054610100900460ff16158080156108a85750600054600160ff909116105b806108c25750303b1580156108c2575060005460ff166001145b6109255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105f3565b6000805460ff191660011790558015610948576000805461ff0019166101001790555b6109506115ef565b61095a838361161e565b80156105a6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000060405163b760faf960e01b81523060048201526001600160a01b03919091169063b760faf99034906024016000604051808303818588803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b5050505050565b610a2c61169b565b7f000000000000000000000000000000000000000000000000000000000000000060405163040b850f60e31b81526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b158015610a9957600080fd5b505af1158015610880573d6000803e3d6000fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610af55760405162461bcd60e51b81526004016105f390612380565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b3e6000805160206125a4833981519152546001600160a01b031690565b6001600160a01b031614610b645760405162461bcd60e51b81526004016105f3906123cc565b610b6d826110fc565b610b7982826001611104565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c1d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105f3565b506000805160206125a483398151915290565b610c3861169b565b610c4260006116f5565b565b610c4c6113ee565b610c55846114a7565b610c96848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157f92505050565b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2891906124a3565b905090565b604051631aab3f0d60e11b8152306004820152600060248201819052906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610ce7565b610d8b61169b565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b610db561169b565b6001600160a01b038116610e1a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105f3565b610690816116f5565b60008151604114610e8a5760405162461bcd60e51b815260206004820152603a60248201526000805160206125eb83398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e67746800000000000060648201526084016105f3565b600082604081518110610e9f57610e9f612418565b016020015160f81c90506000610eb58482611747565b90506000610ec4856020611747565b90506fa2a8918ca85bafe22016d0b997e4df60600160ff1b03811115610f405760405162461bcd60e51b815260206004820152603d60248201526000805160206125eb83398151915260448201527f3a20696e76616c6964207369676e6174757265202773272076616c756500000060648201526084016105f3565b8260ff16601b14158015610f5857508260ff16601c14155b15610fb95760405162461bcd60e51b815260206004820152603d60248201526000805160206125eb83398151915260448201527f3a20696e76616c6964207369676e6174757265202776272076616c756500000060648201526084016105f3565b60408051600081526020810180835288905260ff851691810191909152606081018390526080810182905260019060a0016020604051602081039080840390855afa15801561100c573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b0384166110765760405162461bcd60e51b815260206004820152603060248201526000805160206125eb83398151915260448201526f1d1024a72b20a624a22fa9a4a3a722a960811b60648201526084016105f3565b50505092915050565b6033546001600160a01b031633148061109757503033145b610c425760405162461bcd60e51b815260206004820152603060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526f081bdc881d1a194818dbdb9d1c9858dd60821b60648201526084016105f3565b61069061169b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611137576105a6836117ad565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611191575060408051601f3d908101601f1916820190925261118e918101906124a3565b60015b6111f45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105f3565b6000805160206125a483398151915281146112635760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105f3565b506105a6838383611849565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c425760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016105f3565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c829052603c812061136461132761014086018661242e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859392505061186e9050565b6001600160a01b031661137f6033546001600160a01b031690565b6001600160a01b0316146113975760019150506104f9565b5060009392505050565b801561069057604051600090339060001990849084818181858888f193505050503d8060008114610a1d576040519150601f19603f3d011682016040523d82523d6000602084013e610a1d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061142f57506033546001600160a01b031633145b80611444575060c9546001600160a01b031633145b610c425760405162461bcd60e51b815260206004820152602e60248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e7460448201526d1037b91020baba3437b934bd32b960911b60648201526084016105f3565b60c9546001600160a01b031633146114bc5750565b306001600160a01b038216036114cf5750565b61153360ca80548060200260200160405190810160405280929190818152602001828054801561152857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161150a575b505050505082611892565b6106905760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a2061646472657373206e6f742077686974656c697374656460448201526064016105f3565b600080846001600160a01b0316848460405161159b91906124e0565b60006040518083038185875af1925050503d80600081146115d8576040519150601f19603f3d011682016040523d82523d6000602084013e6115dd565b606091505b509150915081610a1d57805160208201fd5b600054610100900460ff166116165760405162461bcd60e51b81526004016105f3906124fc565b610c426118ed565b61162782610dad565b60c980546001600160a01b0319166001600160a01b0383811691909117909155604051838216917f000000000000000000000000000000000000000000000000000000000000000016907f526ffefac8167421b9048ae3377810715d834479565b0182ea4155f0efa4c38090600090a35050565b6033546001600160a01b03163314610c425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f3565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611754826020612547565b835110156117a45760405162461bcd60e51b815260206004820181905260248201527f72656164427974657333323a20696e76616c69642064617461206c656e67746860448201526064016105f3565b50016020015190565b6001600160a01b0381163b61181a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105f3565b6000805160206125a483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118528361191d565b60008251118061185f5750805b156105a657610c96838361195d565b600080600061187d8585611982565b9150915061188a816119c7565b509392505050565b6000805b835181101561139757826001600160a01b03168482815181106118bb576118bb612418565b60200260200101516001600160a01b0316036118db5760019150506104f9565b806118e58161248a565b915050611896565b600054610100900460ff166119145760405162461bcd60e51b81526004016105f3906124fc565b610c42336116f5565b611926816117ad565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061058b83836040518060600160405280602781526020016125c460279139611b11565b60008082516041036119b85760208301516040840151606085015160001a6119ac87828585611b89565b945094505050506119c0565b506000905060025b9250929050565b60008160048111156119db576119db61255a565b036119e35750565b60018160048111156119f7576119f761255a565b03611a445760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105f3565b6002816004811115611a5857611a5861255a565b03611aa55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105f3565b6003816004811115611ab957611ab961255a565b036106905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105f3565b6060600080856001600160a01b031685604051611b2e91906124e0565b600060405180830381855af49150503d8060008114611b69576040519150601f19603f3d011682016040523d82523d6000602084013e611b6e565b606091505b5091509150611b7f86838387611c43565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115611bb65750600090506003611c3a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c0a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c3357600060019250925050611c3a565b9150600090505b94509492505050565b60608315611cb2578251600003611cab576001600160a01b0385163b611cab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f3565b5081611cbc565b611cbc8383611cc4565b949350505050565b815115611cd45781518083602001fd5b8060405162461bcd60e51b81526004016105f39190612570565b828054828255906000526020600020908101928215611d41579160200282015b82811115611d415781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611d0e565b50611d4d929150611d51565b5090565b5b80821115611d4d5760008155600101611d52565b6001600160a01b038116811461069057600080fd5b60008083601f840112611d8d57600080fd5b5081356001600160401b03811115611da457600080fd5b6020830191508360208285010111156119c057600080fd5b60008060008060008060008060c0898b031215611dd857600080fd5b8835611de381611d66565b97506020890135611df381611d66565b96506040890135611e0381611d66565b95506060890135945060808901356001600160401b0380821115611e2657600080fd5b611e328c838d01611d7b565b909650945060a08b0135915080821115611e4b57600080fd5b50611e588b828c01611d7b565b999c989b5096995094979396929594505050565b600060208284031215611e7e57600080fd5b81356001600160e01b03198116811461058b57600080fd5b600080600080600060808688031215611eae57600080fd5b8535611eb981611d66565b94506020860135611ec981611d66565b93506040860135925060608601356001600160401b03811115611eeb57600080fd5b611ef788828901611d7b565b969995985093965092949392505050565b600080600060408486031215611f1d57600080fd5b8335925060208401356001600160401b03811115611f3a57600080fd5b611f4686828701611d7b565b9497909650939450505050565b60008083601f840112611f6557600080fd5b5081356001600160401b03811115611f7c57600080fd5b6020830191508360208260051b85010111156119c057600080fd5b60008060208385031215611faa57600080fd5b82356001600160401b03811115611fc057600080fd5b611fcc85828601611f53565b90969095509350505050565b600060208284031215611fea57600080fd5b813561058b81611d66565b60008060006060848603121561200a57600080fd5b83356001600160401b0381111561202057600080fd5b8401610160818703121561203357600080fd5b95602085013595506040909401359392505050565b6000806000806000806060878903121561206157600080fd5b86356001600160401b038082111561207857600080fd5b6120848a838b01611f53565b9098509650602089013591508082111561209d57600080fd5b6120a98a838b01611f53565b909650945060408901359150808211156120c257600080fd5b506120cf89828a01611f53565b979a9699509497509295939492505050565b600080604083850312156120f457600080fd5b82356120ff81611d66565b9150602083013561210f81611d66565b809150509250929050565b6000806040838503121561212d57600080fd5b823561213881611d66565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561216f57600080fd5b823561217a81611d66565b915060208301356001600160401b038082111561219657600080fd5b818501915085601f8301126121aa57600080fd5b8135818111156121bc576121bc612146565b604051601f8201601f19908116603f011681019083821181831017156121e4576121e4612146565b816040528281528860208487010111156121fd57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806060858703121561223557600080fd5b843561224081611d66565b93506020850135925060408501356001600160401b0381111561226257600080fd5b61226e87828801611d7b565b95989497509550505050565b60008060008060008060008060a0898b03121561229657600080fd5b88356122a181611d66565b975060208901356122b181611d66565b965060408901356001600160401b03808211156122cd57600080fd5b6122d98c838d01611f53565b909850965060608b01359150808211156122f257600080fd5b6122fe8c838d01611f53565b909650945060808b0135915080821115611e4b57600080fd5b60008060008060008060a0878903121561233057600080fd5b863561233b81611d66565b9550602087013561234b81611d66565b9450604087013593506060870135925060808701356001600160401b0381111561237457600080fd5b6120cf89828a01611d7b565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261244557600080fd5b8301803591506001600160401b0382111561245f57600080fd5b6020019150368190038213156119c057600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161249c5761249c612474565b5060010190565b6000602082840312156124b557600080fd5b5051919050565b60005b838110156124d75781810151838201526020016124bf565b50506000910152565b600082516124f28184602087016124bc565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808201808211156104f9576104f9612474565b634e487b7160e01b600052602160045260246000fd5b602081526000825180602084015261258f8160408501602087016124bc565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65645369676e617475726556616c696461746f72237265636f7665725369676e6572a2646970667358221220bacbe7b634be340254c31793fa997b01fd333e745c061025fb637b1a6a4f03dc64736f6c63430008140033",
}

// AccfactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccfactoryMetaData.ABI instead.
var AccfactoryABI = AccfactoryMetaData.ABI

// AccfactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccfactoryMetaData.Bin instead.
var AccfactoryBin = AccfactoryMetaData.Bin

// DeployAccfactory deploys a new Ethereum contract, binding an instance of Accfactory to it.
func DeployAccfactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address, _authorizer common.Address) (common.Address, *types.Transaction, *Accfactory, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccfactoryBin), backend, _entryPoint, _authorizer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// Accfactory is an auto generated Go binding around an Ethereum contract.
type Accfactory struct {
	AccfactoryCaller     // Read-only binding to the contract
	AccfactoryTransactor // Write-only binding to the contract
	AccfactoryFilterer   // Log filterer for contract events
}

// AccfactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccfactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccfactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccfactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccfactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccfactorySession struct {
	Contract     *Accfactory       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccfactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccfactoryCallerSession struct {
	Contract *AccfactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccfactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccfactoryTransactorSession struct {
	Contract     *AccfactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccfactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccfactoryRaw struct {
	Contract *Accfactory // Generic contract binding to access the raw methods on
}

// AccfactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccfactoryCallerRaw struct {
	Contract *AccfactoryCaller // Generic read-only contract binding to access the raw methods on
}

// AccfactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccfactoryTransactorRaw struct {
	Contract *AccfactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccfactory creates a new instance of Accfactory, bound to a specific deployed contract.
func NewAccfactory(address common.Address, backend bind.ContractBackend) (*Accfactory, error) {
	contract, err := bindAccfactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accfactory{AccfactoryCaller: AccfactoryCaller{contract: contract}, AccfactoryTransactor: AccfactoryTransactor{contract: contract}, AccfactoryFilterer: AccfactoryFilterer{contract: contract}}, nil
}

// NewAccfactoryCaller creates a new read-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryCaller(address common.Address, caller bind.ContractCaller) (*AccfactoryCaller, error) {
	contract, err := bindAccfactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryCaller{contract: contract}, nil
}

// NewAccfactoryTransactor creates a new write-only instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccfactoryTransactor, error) {
	contract, err := bindAccfactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccfactoryTransactor{contract: contract}, nil
}

// NewAccfactoryFilterer creates a new log filterer instance of Accfactory, bound to a specific deployed contract.
func NewAccfactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccfactoryFilterer, error) {
	contract, err := bindAccfactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccfactoryFilterer{contract: contract}, nil
}

// bindAccfactory binds a generic wrapper to an already deployed contract.
func bindAccfactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccfactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.AccfactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.AccfactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accfactory *AccfactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accfactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accfactory *AccfactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accfactory *AccfactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accfactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactorySession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_Accfactory *AccfactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _Accfactory.Contract.AccountImplementation(&_Accfactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_Accfactory *AccfactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Accfactory.Contract.GetAddress(&_Accfactory.CallOpts, owner, salt)
}

// GetNonce is a free data retrieval call binding the contract method 0x35567e1a.
//
// Solidity: function getNonce(address sender, uint192 key) view returns(uint256 nonce)
func (_Accfactory *AccfactoryCaller) GetNonce(opts *bind.CallOpts, sender common.Address, key *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "getNonce", sender, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x35567e1a.
//
// Solidity: function getNonce(address sender, uint192 key) view returns(uint256 nonce)
func (_Accfactory *AccfactorySession) GetNonce(sender common.Address, key *big.Int) (*big.Int, error) {
	return _Accfactory.Contract.GetNonce(&_Accfactory.CallOpts, sender, key)
}

// GetNonce is a free data retrieval call binding the contract method 0x35567e1a.
//
// Solidity: function getNonce(address sender, uint192 key) view returns(uint256 nonce)
func (_Accfactory *AccfactoryCallerSession) GetNonce(sender common.Address, key *big.Int) (*big.Int, error) {
	return _Accfactory.Contract.GetNonce(&_Accfactory.CallOpts, sender, key)
}

// NonceSequenceNumber is a free data retrieval call binding the contract method 0x1b2e01b8.
//
// Solidity: function nonceSequenceNumber(address , uint192 ) view returns(uint256)
func (_Accfactory *AccfactoryCaller) NonceSequenceNumber(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Accfactory.contract.Call(opts, &out, "nonceSequenceNumber", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NonceSequenceNumber is a free data retrieval call binding the contract method 0x1b2e01b8.
//
// Solidity: function nonceSequenceNumber(address , uint192 ) view returns(uint256)
func (_Accfactory *AccfactorySession) NonceSequenceNumber(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Accfactory.Contract.NonceSequenceNumber(&_Accfactory.CallOpts, arg0, arg1)
}

// NonceSequenceNumber is a free data retrieval call binding the contract method 0x1b2e01b8.
//
// Solidity: function nonceSequenceNumber(address , uint192 ) view returns(uint256)
func (_Accfactory *AccfactoryCallerSession) NonceSequenceNumber(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Accfactory.Contract.NonceSequenceNumber(&_Accfactory.CallOpts, arg0, arg1)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_Accfactory *AccfactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.CreateAccount(&_Accfactory.TransactOpts, owner, salt)
}

// IncrementNonce is a paid mutator transaction binding the contract method 0x0bd28e3b.
//
// Solidity: function incrementNonce(uint192 key) returns()
func (_Accfactory *AccfactoryTransactor) IncrementNonce(opts *bind.TransactOpts, key *big.Int) (*types.Transaction, error) {
	return _Accfactory.contract.Transact(opts, "incrementNonce", key)
}

// IncrementNonce is a paid mutator transaction binding the contract method 0x0bd28e3b.
//
// Solidity: function incrementNonce(uint192 key) returns()
func (_Accfactory *AccfactorySession) IncrementNonce(key *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.IncrementNonce(&_Accfactory.TransactOpts, key)
}

// IncrementNonce is a paid mutator transaction binding the contract method 0x0bd28e3b.
//
// Solidity: function incrementNonce(uint192 key) returns()
func (_Accfactory *AccfactoryTransactorSession) IncrementNonce(key *big.Int) (*types.Transaction, error) {
	return _Accfactory.Contract.IncrementNonce(&_Accfactory.TransactOpts, key)
}
