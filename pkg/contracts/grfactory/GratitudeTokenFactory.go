// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package grfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// GrfactoryMetaData contains all meta data concerning the Grfactory contract.
var GrfactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"GratitudeTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createGratitudeToken\",\"outputs\":[{\"internalType\":\"contractGratitudeToken\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getGratitudeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gratitudeImplementation\",\"outputs\":[{\"internalType\":\"contractGratitudeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561000f575f80fd5b506040516127b23803806127b283398101604081905261002e91610084565b8060405161003b90610077565b6001600160a01b039091168152602001604051809103905ff080158015610064573d5f803e3d5ffd5b506001600160a01b0316608052506100b1565b611e5f8061095383390190565b5f60208284031215610094575f80fd5b81516001600160a01b03811681146100aa575f80fd5b9392505050565b60805161087d6100d65f395f818160770152818161011c01526101e4015261087d5ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806301dfecf014610043578063c56ce58814610072578063d87c2ee514610099575b5f80fd5b6100566100513660046102bd565b6100ac565b6040516001600160a01b03909116815260200160405180910390f35b6100567f000000000000000000000000000000000000000000000000000000000000000081565b6100566100a73660046102bd565b6101a7565b5f806100b884846101a7565b90506001600160a01b0381163b80156100d3575090506101a1565b6040516001600160a01b038616907f632ffdb1f5dbeb99afea447aa1f5f6cc4b23d0f61f074784c8c03a4134d7c15a905f90a26040516001600160a01b038616602482015284907f00000000000000000000000000000000000000000000000000000000000000009060440160408051601f198184030181529181526020820180516001600160e01b031663189acdbd60e31b17905251610173906102b0565b61017e929190610314565b8190604051809103905ff590508015801561019b573d5f803e3d5ffd5b50925050505b92915050565b5f610279825f1b604051806020016101be906102b0565b601f1982820381018352601f9091011660408190526001600160a01b03871660248201527f00000000000000000000000000000000000000000000000000000000000000009060440160408051601f19818403018152918152602080830180516001600160e01b031663189acdbd60e31b179052905161024093929101610314565b60408051601f198184030181529082905261025e9291602001610355565b60405160208183030381529060405280519060200120610280565b9392505050565b5f6102798383305f604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6104c48061038483390190565b5f80604083850312156102ce575f80fd5b82356001600160a01b03811681146102e4575f80fd5b946020939093013593505050565b5f5b8381101561030c5781810151838201526020016102f4565b50505f910152565b60018060a01b0383168152604060208201525f82518060408401526103408160608501602087016102f2565b601f01601f1916919091016060019392505050565b5f83516103668184602088016102f2565b83519083019061037a8183602088016102f2565b0194935050505056fe60806040526040516104c43803806104c4833981016040819052610022916102d2565b61002d82825f610034565b50506103e7565b61003d8361005f565b5f825111806100495750805b1561005a57610058838361009e565b505b505050565b610068816100ca565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60606100c3838360405180606001604052806027815260200161049d6027913961017d565b9392505050565b6001600160a01b0381163b61013c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80856001600160a01b031685604051610199919061039a565b5f60405180830381855af49150503d805f81146101d1576040519150601f19603f3d011682016040523d82523d5f602084013e6101d6565b606091505b5090925090506101e8868383876101f2565b9695505050505050565b606083156102605782515f03610259576001600160a01b0385163b6102595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610133565b508161026a565b61026a8383610272565b949350505050565b8151156102825781518083602001fd5b8060405162461bcd60e51b815260040161013391906103b5565b634e487b7160e01b5f52604160045260245ffd5b5f5b838110156102ca5781810151838201526020016102b2565b50505f910152565b5f80604083850312156102e3575f80fd5b82516001600160a01b03811681146102f9575f80fd5b60208401519092506001600160401b0380821115610315575f80fd5b818501915085601f830112610328575f80fd5b81518181111561033a5761033a61029c565b604051601f8201601f19908116603f011681019083821181831017156103625761036261029c565b8160405282815288602084870101111561037a575f80fd5b61038b8360208301602088016102b0565b80955050505050509250929050565b5f82516103ab8184602087016102b0565b9190910192915050565b602081525f82518060208401526103d38160408501602087016102b0565b601f01601f19169190910160400192915050565b60aa806103f35f395ff3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6057565b565b5f60527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b365f80375f80365f845af43d5f803e8080156070573d5ff35b3d5ffdfea2646970667358221220ff68d3e6192271a47126854399af718135299600c85b59bfea043539fa8bc45164736f6c63430008140033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122079c6aaba1228f710d24a73f25ffec1b856feab69cccd22079e8854aeba4329aa64736f6c6343000814003360c06040523060805234801562000014575f80fd5b5060405162001e5f38038062001e5f833981016040819052620000379162000113565b6001600160a01b03811660a0526200004e62000055565b5062000142565b5f54610100900460ff1615620000c15760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff9081161462000111575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b5f6020828403121562000124575f80fd5b81516001600160a01b03811681146200013b575f80fd5b9392505050565b60805160a051611cd16200018e5f395f81816103dd01528181610c1d01526110c701525f818161052b015281816105740152818161064f0152818161068f015261071c0152611cd15ff3fe60806040526004361061013c575f3560e01c806352d1902d116100b357806395d89b411161006d57806395d89b411461037d578063a457c2d714610391578063a9059cbb146103b0578063b0d691fe146103cf578063c4d66de814610401578063dd62ed3e14610420575f80fd5b806352d1902d146102a157806370a08231146102b557806379cc6790146102e95780638a0b0360146103085780638da5cb5b14610327578063925247251461035e575f80fd5b8063313ce56711610104578063313ce567146101f75780633659cfe614610212578063395093511461023157806340c10f191461025057806342966c681461026f5780634f1ef2861461028e575f80fd5b806306fdde0314610140578063095ea7b31461016a57806318160ddd14610199578063203abe34146101b757806323b872dd146101d8575b5f80fd5b34801561014b575f80fd5b5061015461043f565b60405161016191906115fc565b60405180910390f35b348015610175575f80fd5b50610189610184366004611649565b6104cf565b6040519015158152602001610161565b3480156101a4575f80fd5b506035545b604051908152602001610161565b3480156101c2575f80fd5b506101d66101d1366004611748565b6104e8565b005b3480156101e3575f80fd5b506101896101f236600461177a565b610505565b348015610202575f80fd5b5060405160128152602001610161565b34801561021d575f80fd5b506101d661022c3660046117b3565b610521565b34801561023c575f80fd5b5061018961024b366004611649565b610604565b34801561025b575f80fd5b506101d661026a366004611649565b610625565b34801561027a575f80fd5b506101d66102893660046117cc565b61063b565b6101d661029c3660046117e3565b610645565b3480156102ac575f80fd5b506101a9610710565b3480156102c0575f80fd5b506101a96102cf3660046117b3565b6001600160a01b03165f9081526033602052604090205490565b3480156102f4575f80fd5b506101d6610303366004611649565b6107c1565b348015610313575f80fd5b506101d6610322366004611883565b6107d6565b348015610332575f80fd5b5060fb54610346906001600160a01b031681565b6040516001600160a01b039091168152602001610161565b348015610369575f80fd5b506101d66103783660046118c5565b610828565b348015610388575f80fd5b5061015461090b565b34801561039c575f80fd5b506101896103ab366004611649565b61091a565b3480156103bb575f80fd5b506101896103ca366004611649565b61099f565b3480156103da575f80fd5b507f0000000000000000000000000000000000000000000000000000000000000000610346565b34801561040c575f80fd5b506101d661041b3660046117b3565b6109b9565b34801561042b575f80fd5b506101a961043a36600461197a565b610ac5565b60606036805461044e906119ab565b80601f016020809104026020016040519081016040528092919081815260200182805461047a906119ab565b80156104c55780601f1061049c576101008083540402835291602001916104c5565b820191905f5260205f20905b8154815290600101906020018083116104a857829003601f168201915b5050505050905090565b5f336104dc818585610aef565b60019150505b92915050565b6104f0610c12565b61050281670de0b6b3a76400006107d6565b50565b5f61050e610c12565b610519848484610ca1565b949350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105725760405162461bcd60e51b8152600401610569906119e3565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105ba5f80516020611c55833981519152546001600160a01b031690565b6001600160a01b0316146105e05760405162461bcd60e51b815260040161056990611a2f565b6105e981610cb9565b604080515f8082526020820190925261050291839190610cc1565b5f336104dc8185856106168383610ac5565b6106209190611a8f565b610aef565b61062d610c12565b6106378282610e2b565b5050565b6105023382610eea565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361068d5760405162461bcd60e51b8152600401610569906119e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106d55f80516020611c55833981519152546001600160a01b031690565b6001600160a01b0316146106fb5760405162461bcd60e51b815260040161056990611a2f565b61070482610cb9565b61063782826001610cc1565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107af5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610569565b505f80516020611c5583398151915290565b6107cc82338361101c565b6106378282610eea565b6107de610c12565b5f5b8251811015610823575f8382815181106107fc576107fc611aa2565b602002602001015190506108108184610e2b565b508061081b81611ab6565b9150506107e0565b505050565b610830610c12565b80518251146108a75760405162461bcd60e51b815260206004820152603760248201527f726563697069656e747320616e6420616d6f756e747320617272617973206d7560448201527f73742068617665207468652073616d65206c656e6774680000000000000000006064820152608401610569565b5f5b8251811015610823575f8382815181106108c5576108c5611aa2565b602002602001015190505f8383815181106108e2576108e2611aa2565b602002602001015190506108f68282610e2b565b5050808061090390611ab6565b9150506108a9565b60606037805461044e906119ab565b5f33816109278286610ac5565b9050838110156109875760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610569565b6109948286868403610aef565b506001949350505050565b5f6109a8610c12565b6109b28383611094565b9392505050565b5f54610100900460ff16158080156109d757505f54600160ff909116105b806109f05750303b1580156109f057505f5460ff166001145b610a535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610569565b5f805460ff191660011790558015610a74575f805461ff0019166101001790555b610a7d826110a1565b8015610637575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b039182165f90815260346020908152604080832093909416825291909152205490565b6001600160a01b038316610b515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610569565b6001600160a01b038216610bb25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610569565b6001600160a01b038381165f8181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610c53575060fb546001600160a01b031633145b610c9f5760405162461bcd60e51b815260206004820181905260248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e746044820152606401610569565b565b5f33610cae85828561101c565b610994858585611168565b610502610c12565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610cf45761082383611311565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d4e575060408051601f3d908101601f19168201909252610d4b91810190611ace565b60015b610db15760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610569565b5f80516020611c558339815191528114610e1f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610569565b506108238383836113ac565b6001600160a01b038216610e815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610569565b8060355f828254610e929190611a8f565b90915550506001600160a01b0382165f818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216610f4a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610569565b6001600160a01b0382165f9081526033602052604090205481811015610fbd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610569565b6001600160a01b0383165f8181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b5f6110278484610ac5565b90505f19811461108e57818110156110815760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610569565b61108e8484848403610aef565b50505050565b5f336104dc818585611168565b60fb80546001600160a01b0319166001600160a01b0383811691821790925560405190917f000000000000000000000000000000000000000000000000000000000000000016907fe90b83f24696d649f6cdd7a0b35764256ae51f4998f6b266afb6fc6f2d50c602905f90a36111586040518060400160405280600e81526020016d23b930ba34ba3ab232aa37b5b2b760911b8152506040518060400160405280600381526020016211d51560ea1b8152506113d0565b611160611400565b610502611400565b6001600160a01b0383166111cc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610569565b6001600160a01b03821661122e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610569565b6001600160a01b0383165f90815260336020526040902054818110156112a55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610569565b6001600160a01b038085165f8181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113049086815260200190565b60405180910390a361108e565b6001600160a01b0381163b61137e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610569565b5f80516020611c5583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6113b583611426565b5f825111806113c15750805b156108235761108e8383611465565b5f54610100900460ff166113f65760405162461bcd60e51b815260040161056990611ae5565b610637828261148a565b5f54610100900460ff16610c9f5760405162461bcd60e51b815260040161056990611ae5565b61142f81611311565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60606109b28383604051806060016040528060278152602001611c75602791396114c9565b5f54610100900460ff166114b05760405162461bcd60e51b815260040161056990611ae5565b60366114bc8382611b7d565b5060376108238282611b7d565b60605f80856001600160a01b0316856040516114e59190611c39565b5f60405180830381855af49150503d805f811461151d576040519150601f19603f3d011682016040523d82523d5f602084013e611522565b606091505b50915091506115338683838761153d565b9695505050505050565b606083156115ab5782515f036115a4576001600160a01b0385163b6115a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610569565b5081610519565b61051983838151156115c05781518083602001fd5b8060405162461bcd60e51b815260040161056991906115fc565b5f5b838110156115f45781810151838201526020016115dc565b50505f910152565b602081525f825180602084015261161a8160408501602087016115da565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611644575f80fd5b919050565b5f806040838503121561165a575f80fd5b6116638361162e565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156116ae576116ae611671565b604052919050565b5f67ffffffffffffffff8211156116cf576116cf611671565b5060051b60200190565b5f82601f8301126116e8575f80fd5b813560206116fd6116f8836116b6565b611685565b82815260059290921b8401810191818101908684111561171b575f80fd5b8286015b8481101561173d576117308161162e565b835291830191830161171f565b509695505050505050565b5f60208284031215611758575f80fd5b813567ffffffffffffffff81111561176e575f80fd5b610519848285016116d9565b5f805f6060848603121561178c575f80fd5b6117958461162e565b92506117a36020850161162e565b9150604084013590509250925092565b5f602082840312156117c3575f80fd5b6109b28261162e565b5f602082840312156117dc575f80fd5b5035919050565b5f80604083850312156117f4575f80fd5b6117fd8361162e565b915060208084013567ffffffffffffffff8082111561181a575f80fd5b818601915086601f83011261182d575f80fd5b81358181111561183f5761183f611671565b611851601f8201601f19168501611685565b91508082528784828501011115611866575f80fd5b80848401858401375f848284010152508093505050509250929050565b5f8060408385031215611894575f80fd5b823567ffffffffffffffff8111156118aa575f80fd5b6118b6858286016116d9565b95602094909401359450505050565b5f80604083850312156118d6575f80fd5b823567ffffffffffffffff808211156118ed575f80fd5b6118f9868387016116d9565b935060209150818501358181111561190f575f80fd5b85019050601f81018613611921575f80fd5b803561192f6116f8826116b6565b81815260059190911b8201830190838101908883111561194d575f80fd5b928401925b8284101561196b57833582529284019290840190611952565b80955050505050509250929050565b5f806040838503121561198b575f80fd5b6119948361162e565b91506119a26020840161162e565b90509250929050565b600181811c908216806119bf57607f821691505b6020821081036119dd57634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b808201808211156104e2576104e2611a7b565b634e487b7160e01b5f52603260045260245ffd5b5f60018201611ac757611ac7611a7b565b5060010190565b5f60208284031215611ade575f80fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b601f821115610823575f81815260208120601f850160051c81016020861015611b565750805b601f850160051c820191505b81811015611b7557828155600101611b62565b505050505050565b815167ffffffffffffffff811115611b9757611b97611671565b611bab81611ba584546119ab565b84611b30565b602080601f831160018114611bde575f8415611bc75750858301515b5f19600386901b1c1916600185901b178555611b75565b5f85815260208120601f198616915b82811015611c0c57888601518255948401946001909101908401611bed565b5085821015611c2957878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f8251611c4a8184602087016115da565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204e97f3c5dbb2b9a4601c0e1a27e024ac4552c0a65ca76692f2159d906dcd723b64736f6c63430008140033",
}

// GrfactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use GrfactoryMetaData.ABI instead.
var GrfactoryABI = GrfactoryMetaData.ABI

// GrfactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GrfactoryMetaData.Bin instead.
var GrfactoryBin = GrfactoryMetaData.Bin

// DeployGrfactory deploys a new Ethereum contract, binding an instance of Grfactory to it.
func DeployGrfactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *Grfactory, error) {
	parsed, err := GrfactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GrfactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Grfactory{GrfactoryCaller: GrfactoryCaller{contract: contract}, GrfactoryTransactor: GrfactoryTransactor{contract: contract}, GrfactoryFilterer: GrfactoryFilterer{contract: contract}}, nil
}

// Grfactory is an auto generated Go binding around an Ethereum contract.
type Grfactory struct {
	GrfactoryCaller     // Read-only binding to the contract
	GrfactoryTransactor // Write-only binding to the contract
	GrfactoryFilterer   // Log filterer for contract events
}

// GrfactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type GrfactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GrfactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GrfactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GrfactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GrfactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GrfactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GrfactorySession struct {
	Contract     *Grfactory        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GrfactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GrfactoryCallerSession struct {
	Contract *GrfactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// GrfactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GrfactoryTransactorSession struct {
	Contract     *GrfactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// GrfactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type GrfactoryRaw struct {
	Contract *Grfactory // Generic contract binding to access the raw methods on
}

// GrfactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GrfactoryCallerRaw struct {
	Contract *GrfactoryCaller // Generic read-only contract binding to access the raw methods on
}

// GrfactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GrfactoryTransactorRaw struct {
	Contract *GrfactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGrfactory creates a new instance of Grfactory, bound to a specific deployed contract.
func NewGrfactory(address common.Address, backend bind.ContractBackend) (*Grfactory, error) {
	contract, err := bindGrfactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Grfactory{GrfactoryCaller: GrfactoryCaller{contract: contract}, GrfactoryTransactor: GrfactoryTransactor{contract: contract}, GrfactoryFilterer: GrfactoryFilterer{contract: contract}}, nil
}

// NewGrfactoryCaller creates a new read-only instance of Grfactory, bound to a specific deployed contract.
func NewGrfactoryCaller(address common.Address, caller bind.ContractCaller) (*GrfactoryCaller, error) {
	contract, err := bindGrfactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GrfactoryCaller{contract: contract}, nil
}

// NewGrfactoryTransactor creates a new write-only instance of Grfactory, bound to a specific deployed contract.
func NewGrfactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*GrfactoryTransactor, error) {
	contract, err := bindGrfactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GrfactoryTransactor{contract: contract}, nil
}

// NewGrfactoryFilterer creates a new log filterer instance of Grfactory, bound to a specific deployed contract.
func NewGrfactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*GrfactoryFilterer, error) {
	contract, err := bindGrfactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GrfactoryFilterer{contract: contract}, nil
}

// bindGrfactory binds a generic wrapper to an already deployed contract.
func bindGrfactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GrfactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Grfactory *GrfactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Grfactory.Contract.GrfactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Grfactory *GrfactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Grfactory.Contract.GrfactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Grfactory *GrfactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Grfactory.Contract.GrfactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Grfactory *GrfactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Grfactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Grfactory *GrfactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Grfactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Grfactory *GrfactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Grfactory.Contract.contract.Transact(opts, method, params...)
}

// GetGratitudeTokenAddress is a free data retrieval call binding the contract method 0xd87c2ee5.
//
// Solidity: function getGratitudeTokenAddress(address owner, uint256 salt) view returns(address)
func (_Grfactory *GrfactoryCaller) GetGratitudeTokenAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Grfactory.contract.Call(opts, &out, "getGratitudeTokenAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGratitudeTokenAddress is a free data retrieval call binding the contract method 0xd87c2ee5.
//
// Solidity: function getGratitudeTokenAddress(address owner, uint256 salt) view returns(address)
func (_Grfactory *GrfactorySession) GetGratitudeTokenAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Grfactory.Contract.GetGratitudeTokenAddress(&_Grfactory.CallOpts, owner, salt)
}

// GetGratitudeTokenAddress is a free data retrieval call binding the contract method 0xd87c2ee5.
//
// Solidity: function getGratitudeTokenAddress(address owner, uint256 salt) view returns(address)
func (_Grfactory *GrfactoryCallerSession) GetGratitudeTokenAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _Grfactory.Contract.GetGratitudeTokenAddress(&_Grfactory.CallOpts, owner, salt)
}

// GratitudeImplementation is a free data retrieval call binding the contract method 0xc56ce588.
//
// Solidity: function gratitudeImplementation() view returns(address)
func (_Grfactory *GrfactoryCaller) GratitudeImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Grfactory.contract.Call(opts, &out, "gratitudeImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GratitudeImplementation is a free data retrieval call binding the contract method 0xc56ce588.
//
// Solidity: function gratitudeImplementation() view returns(address)
func (_Grfactory *GrfactorySession) GratitudeImplementation() (common.Address, error) {
	return _Grfactory.Contract.GratitudeImplementation(&_Grfactory.CallOpts)
}

// GratitudeImplementation is a free data retrieval call binding the contract method 0xc56ce588.
//
// Solidity: function gratitudeImplementation() view returns(address)
func (_Grfactory *GrfactoryCallerSession) GratitudeImplementation() (common.Address, error) {
	return _Grfactory.Contract.GratitudeImplementation(&_Grfactory.CallOpts)
}

// CreateGratitudeToken is a paid mutator transaction binding the contract method 0x01dfecf0.
//
// Solidity: function createGratitudeToken(address owner, uint256 salt) returns(address ret)
func (_Grfactory *GrfactoryTransactor) CreateGratitudeToken(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Grfactory.contract.Transact(opts, "createGratitudeToken", owner, salt)
}

// CreateGratitudeToken is a paid mutator transaction binding the contract method 0x01dfecf0.
//
// Solidity: function createGratitudeToken(address owner, uint256 salt) returns(address ret)
func (_Grfactory *GrfactorySession) CreateGratitudeToken(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Grfactory.Contract.CreateGratitudeToken(&_Grfactory.TransactOpts, owner, salt)
}

// CreateGratitudeToken is a paid mutator transaction binding the contract method 0x01dfecf0.
//
// Solidity: function createGratitudeToken(address owner, uint256 salt) returns(address ret)
func (_Grfactory *GrfactoryTransactorSession) CreateGratitudeToken(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _Grfactory.Contract.CreateGratitudeToken(&_Grfactory.TransactOpts, owner, salt)
}

// GrfactoryGratitudeTokenCreatedIterator is returned from FilterGratitudeTokenCreated and is used to iterate over the raw logs and unpacked data for GratitudeTokenCreated events raised by the Grfactory contract.
type GrfactoryGratitudeTokenCreatedIterator struct {
	Event *GrfactoryGratitudeTokenCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GrfactoryGratitudeTokenCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GrfactoryGratitudeTokenCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GrfactoryGratitudeTokenCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GrfactoryGratitudeTokenCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GrfactoryGratitudeTokenCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GrfactoryGratitudeTokenCreated represents a GratitudeTokenCreated event raised by the Grfactory contract.
type GrfactoryGratitudeTokenCreated struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterGratitudeTokenCreated is a free log retrieval operation binding the contract event 0x632ffdb1f5dbeb99afea447aa1f5f6cc4b23d0f61f074784c8c03a4134d7c15a.
//
// Solidity: event GratitudeTokenCreated(address indexed owner)
func (_Grfactory *GrfactoryFilterer) FilterGratitudeTokenCreated(opts *bind.FilterOpts, owner []common.Address) (*GrfactoryGratitudeTokenCreatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Grfactory.contract.FilterLogs(opts, "GratitudeTokenCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GrfactoryGratitudeTokenCreatedIterator{contract: _Grfactory.contract, event: "GratitudeTokenCreated", logs: logs, sub: sub}, nil
}

// WatchGratitudeTokenCreated is a free log subscription operation binding the contract event 0x632ffdb1f5dbeb99afea447aa1f5f6cc4b23d0f61f074784c8c03a4134d7c15a.
//
// Solidity: event GratitudeTokenCreated(address indexed owner)
func (_Grfactory *GrfactoryFilterer) WatchGratitudeTokenCreated(opts *bind.WatchOpts, sink chan<- *GrfactoryGratitudeTokenCreated, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Grfactory.contract.WatchLogs(opts, "GratitudeTokenCreated", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GrfactoryGratitudeTokenCreated)
				if err := _Grfactory.contract.UnpackLog(event, "GratitudeTokenCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGratitudeTokenCreated is a log parse operation binding the contract event 0x632ffdb1f5dbeb99afea447aa1f5f6cc4b23d0f61f074784c8c03a4134d7c15a.
//
// Solidity: event GratitudeTokenCreated(address indexed owner)
func (_Grfactory *GrfactoryFilterer) ParseGratitudeTokenCreated(log types.Log) (*GrfactoryGratitudeTokenCreated, error) {
	event := new(GrfactoryGratitudeTokenCreated)
	if err := _Grfactory.contract.UnpackLog(event, "GratitudeTokenCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
